name: Build and Release Windows SDK

on:
  push:
    branches: [ "main" ]
    tags: "v*"
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Windows dependencies
      shell: pwsh
      run: |
        # Install Scoop package manager
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        
        # Add necessary buckets
        scoop bucket add main
        scoop bucket add extras
        
        # Install LLVM, MinGW, Protobuf, and CMake using Scoop
        scoop install llvm
        scoop install mingw
        scoop install protobuf
        scoop install cmake
        
        # Add Scoop bins to PATH for this step
        $env:Path += ";$HOME\scoop\shims;$HOME\scoop\apps\llvm\current\bin;$HOME\scoop\apps\mingw\current\bin"
        
        # Verify installations with commands that actually exist
        Write-Host "LLVM version:"
        clang --version
        
        Write-Host "GCC version:"
        gcc --version
        
        Write-Host "Protobuf version:"
        protoc --version
        
        Write-Host "CMake version:"
        cmake --version
        
    - name: Setup Windows environment
      shell: pwsh
      run: |
        $ReleasePath = "target\x86_64-pc-windows-msvc\release"
        New-Item -ItemType Directory -Force -Path $ReleasePath
        
        # Add Scoop installed tools to PATH
        $env:Path += ";$HOME\scoop\shims;$HOME\scoop\apps\llvm\current\bin;$HOME\scoop\apps\mingw\current\bin"
        
        # Verify protoc exists and is in PATH
        $protoc_path = (Get-Command protoc -ErrorAction SilentlyContinue).Path
        if ($protoc_path) {
            Write-Host "Found protoc at $protoc_path"
        } else {
            Write-Host "Warning: protoc not found in PATH"
        }

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true
        
    - name: Set Protoc Environment Variables
      run: echo "PROTOC=$HOME/scoop/apps/protobuf/current/bin/protoc.exe" >> $GITHUB_ENV
      shell: bash

    - name: Build Windows
      shell: pwsh
      run: |
        # Add Scoop bins to PATH for this step
        $env:Path += ";$HOME\scoop\shims;$HOME\scoop\apps\llvm\current\bin;$HOME\scoop\apps\mingw\current\bin"
        
        # Set much higher stack size for Windows builds to prevent stack overflows
        $env:RUSTFLAGS="-C link-arg=/STACK:67108864"
        # Set a higher stack size for build scripts specifically
        $env:CARGO_BUILD_RUSTFLAGS="-C link-arg=/STACK:67108864"
        # Enable trace for debugging
        $env:RUSTBACKTRACE=1
        # Enable debug info for build dependencies
        $env:CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG=true
        
        cargo build --release --target x86_64-pc-windows-msvc --verbose
      env:
        OPENSSL_DIR: '/usr'
        OPENSSL_LIB_DIR: '/usr/lib/x86_64-linux-gnu'
        OPENSSL_INCLUDE_DIR: '/usr/include'

    - name: Debug binary location
      run: |
        dir target\x86_64-pc-windows-msvc\release\
      shell: cmd

    - name: Compress artifacts
      shell: pwsh
      run: |
        $ReleasePath = "target\x86_64-pc-windows-msvc\release"
        Set-Location $ReleasePath
        
        # Compress kanari
        $Files = @()
        if (Test-Path "kanari.exe") { 
            $Files += "kanari.exe" 
        }
        if (Test-Path "vcruntime140.dll") { 
            $Files += "vcruntime140.dll" 
        }
        if (Test-Path "msvcp140.dll") { 
            $Files += "msvcp140.dll" 
        }
        Compress-Archive -Path $Files -DestinationPath "kanari-windows-x64.zip" -Force

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kanari-windows-x64
        path: target/x86_64-pc-windows-msvc/release/kanari-windows-x64.zip
        retention-days: 5

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: kanari-windows-x64
          path: artifacts
  
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/kanari-windows-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
